# Copy the docker compose yaml original and paste

docker images

#See running containers
docker ps 
docker ps -a
docker ps --filter "ancestor=eng-ai-agents"
docker volume ls

python3 -m venv assignment2_venv

source venv/bin/activate
source assignment2_venv/bin/activate

pip install --upgrade setuptools wheel
pip install pyyaml
pip install --upgrade pip

pip install scikit-learn



Terminal 
    cd /Users/vi.rubio/eng-ai-agents/assignments/assignment-2
    touch Dockerfile
    -- Paste Dockerfile Below

    touch docker-compose.yml
    -- Paste Docker compose Below


    docker-compose build
    docker-compose up -d

    docker exec -it assignment-2_assignment-2_1 bash

    Verify PyTorch Installation: 
        python -c "import torch; print(torch.__version__)"








Docker File: 
#FROM debian:bookworm-slim as builder
FROM mcr.microsoft.com/vscode/devcontainers/python:dev-3.11-bookworm AS builder

WORKDIR /opt

ENV RYE_HOME="/opt/rye"
ENV PATH="$RYE_HOME/shims:$PATH"

# Add this line to install dpkg (if using a Debian-based image)
RUN apt-get update && apt-get install -y dpkg

# Quarto installation part (for arm64)
RUN curl -LO https://quarto.org/download/latest/quarto-linux-arm64.deb && dpkg -i quarto-linux-arm64.deb

# Install necessary build and runtime dependencies
RUN \
    --mount=type=cache,target=/var/lib/apt/lists \
    --mount=type=cache,target=/var/cache/apt/archives \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        unzip && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get clean && \
    apt-get update && \
    apt-get install -y --no-install-recommends --fix-missing \
        build-essential binutils \
        cmake cmake-qt-gui curl \
        dbus-x11 \
        ffmpeg \
        gdb gcc g++ gfortran git \
        tar \
        lsb-release \
        procps \
        manpages-dev \
        unzip \
        zip \
        wget \
        xauth \
        swig \
        python3-pip python3-dev python3-numpy python3-distutils \
        python3-setuptools python3-pyqt5 python3-opencv \
        libboost-python-dev libboost-thread-dev libatlas-base-dev libavcodec-dev \
        libavformat-dev libavutil-dev libcanberra-gtk3-module libeigen3-dev \
        libglew-dev libgl1-mesa-dev libgl1 libgl1-mesa-glx libglib2.0-0 libgtk2.0-dev \
        libgtk-3-dev libjpeg-dev liblapack-dev \
        liblapacke-dev libopenblas-dev libopencv-dev libpng-dev libpostproc-dev \
        libpq-dev libsm6 libswscale-dev libtbb-dev libtesseract-dev \
        libtiff-dev libtiff5-dev libv4l-dev libx11-dev libxext6 libxine2-dev \
        libxrender-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev \
        libvtk9-dev libdc1394-dev libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev libopenexr-dev \
        openexr \
        pkg-config \
        qv4l2 \
        v4l-utils \
        zlib1g-dev \
        locales \
        && locale-gen en_US.UTF-8 \
        && LC_ALL=en_US.UTF-8 \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

SHELL [ "/bin/bash", "-o", "pipefail", "-c" ]

# Install Rye with caching
RUN \
    --mount=type=cache,target=/opt/rye/cache \
    curl -sSf https://rye.astral.sh/get | RYE_INSTALL_OPTION="--yes" bash && \
    rye config --set-bool behavior.global-python=true && \
    rye config --set-bool behavior.use-uv=true

# Copy and pin Python version
COPY ./.python-version ./pyproject.toml ./requirements* ./
RUN rye pin "$(cat .python-version)" && rye sync

#---------------------------------------------------------------- 2nd STAGE ----------------------------------------------------------------
FROM mcr.microsoft.com/vscode/devcontainers/python:dev-3.11-bookworm
COPY --from=builder /opt/rye /opt/rye

ENV RYE_HOME="/opt/rye"
ENV PATH="$RYE_HOME/shims:$PATH"

# Quarto installation for arm64
RUN curl -LO https://quarto.org/download/latest/quarto-linux-arm64.deb && dpkg -i quarto-linux-arm64.deb

ENV PYTHONUNBUFFERED True

RUN rye config --set-bool behavior.global-python=true && \
    rye config --set-bool behavior.use-uv=true

RUN chown -R vscode $RYE_HOME




Docker Compose: 
version: '3'
services:
  assignment-2:
    build: .
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
    stdin_open: true
    tty: true



Edited pyProject.toml:
[project]
name = "assignment2"  # Replace with your desired project name
version = "0.1.0"  # You can specify the version

[tool.rye]
# Rye specific configurations
# No need to specify name and version again here, since it's already done in [project]

[tool.black]
exclude = '''
(
  /(
    .data
    | .vscode
    | lib
  )/
)
'''

[tool.pyright]
exclude = ['lib']
extraPaths = ['lib/python', 'lib/jedilsp']
ignore = [
    'get-pip.py',
    'install_debugpy.py',
    'tensorboard_launcher.py',
    'testlauncher.py',
    'visualstudio_py_testlauncher.py',
    'testing_tools/unittest_discovery.py',
    'testing_tools/adapter/util.py',
    'testing_tools/adapter/pytest/_discovery.py',
    'testing_tools/adapter/pytest/_pytest_item.py',
    'tests/debug_adapter/test_install_debugpy.py',
    'tests/testing_tools/adapter/.data',
    'tests/testing_tools/adapter/test___main__.py',
    'tests/testing_tools/adapter/test_discovery.py',
    'tests/testing_tools/adapter/test_functional.py',
    'tests/testing_tools/adapter/test_report.py',
    'tests/testing_tools/adapter/test_util.py',
    'tests/testing_tools/adapter/pytest/test_cli.py',
    'tests/testing_tools/adapter/pytest/test_discovery.py',
]

[tool.ruff]
line-length = 140
ignore = ["E402"]
exclude = [
    'get-pip.py',
    'install_debugpy.py',
    'tensorboard_launcher.py',
    'testlauncher.py',
    'visualstudio_py_testlauncher.py',
    'testing_tools/unittest_discovery.py',
    'testing_tools/adapter/util.py',
    'testing_tools/adapter/pytest/_discovery.py',
    'testing_tools/adapter/pytest/_pytest_item.py',
    'tests/debug_adapter/test_install_debugpy.py',
    'tests/testing_tools/adapter/.data',
    'tests/testing_tools/adapter/test___main__.py',
    'tests/testing_tools/adapter/test_discovery.py',
    'tests/testing_tools/adapter/test_functional.py',
    'tests/testing_tools/adapter/test_report.py',
    'tests/testing_tools/adapter/test_util.py',
    'tests/testing_tools/adapter/pytest/test_cli.py',
    'tests/testing_tools/adapter/pytest/test_discovery.py',
    'pythonFiles/testing_tools/*',
    'pythonFiles/testing_tools/adapter/pytest/__init__.py',
    'pythonFiles/tests/pytestadapter/expected_execution_test_output.py',
    'pythonFiles/tests/unittestadapter/.data/discovery_error/file_one.py',
    'pythonFiles/tests/unittestadapter/test_utils.py',
]
